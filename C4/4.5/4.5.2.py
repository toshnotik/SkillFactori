G = {'Адмиралтейская': {'Садовая': 4},
     'Садовая': {'Адмиралтейская': 4, 'Сенная площадь': 4, 'Спасская': 3, 'Звенигородская': 5},
     'Сенная площадь': {'Садовая': 4, 'Спасская': 4},
     'Спасская': {'Садовая': 3, 'Сенная площадь': 4, 'Достоевская' : 6},
     'Достоевская': {'Спасская': 6, 'Владимирская': 3},
     'Владимирская': {'Достоевская': 3, 'Пушкинская': 4},
     'Пушкинская': {'Владимирская': 4, 'Звенигородская': 3},
     'Звенигородская': {'Пушкинская': 3, 'Садовая': 5}}

D = {k: 100 for k in G.keys()}  # расстояния
start_k = 'Адмиралтейская'  # стартовая вершина
D[start_k] = 0  # расстояние от нее до самой себя равно нулю
U = {k: False for k in G.keys()}  # флаги просмотра вершин

for _ in range(len(D)):
    # выбираем среди непросмотренных наименьшее по расстоянию
    min_k = min([k for k in U.keys() if not U[k]], key = lambda x: D[x])

    for v in G[min_k].keys():  # проходимся по всем смежным вершинам
        D[v] = min(D[v], D[min_k] + G[min_k][v])  # минимум
    U[min_k] = True  # просмотренную вершину помечаем


print(D)